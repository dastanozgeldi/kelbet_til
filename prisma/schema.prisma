// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id      String  @id @default(cuid())
  content String
  isAI    Boolean @default(false)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Program {
  JBBM
  NIS
}

enum Language {
  T1
  T2
}

enum BookStatus {
  ACTIVE
  ARCHIVED
}

model Book {
  id      String     @id @default(cuid())
  title   String
  fileUrl String // set from uploadthing
  status  BookStatus @default(ACTIVE)

  program  Program  @default(NIS)
  grade    String // [7, 8, 9, 10, 11, 12]
  language Language
  term     String // [1, 2, 3, 4]

  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  messages Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  role          UserRole  @default(USER)
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  canUseAI      Boolean   @default(false)
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
